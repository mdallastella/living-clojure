#+TITLE: Living Clojure - Chapter 7
#+AUTHOR: Marco Dalla Stella
#+EMAIL: marco@dallastella.name
#+LANGUAGE: en
#+STARTUP: align hidestars lognotestate
#+BABEL: :tangle yes

* Creating web application with Clojure

At the end of this chapter, you will have a working Clojure web app is not only
Clojure on the server side, but also on frontend with Clojure.

** Creating web server with ClojureScript

/Compojure/ is a Clojure library that provides simple routing for another
lower-level web application library called /Ring/. /Ring/ allows web application
to be modular, that's why there is no particular web app framework that people
use in Clojure, rather libraries are used, composed and shared among many
application.

In our example, we are purposely going to focus on routing, JSON and simple
ClojureScript actions so that you can get a good understanding of the basics.

Let's start creating a new Leiningen project, typing ~lein new
compojure cheshire-cat~.

The ~app~ handler is the main entry point of our application. We can now add our
~cheshire-cat~ route to the routes definition:

#+BEGIN_SRC clojure :tangle ../src/living_clojure/chapter7.clj
(defroutes app-routes
  (GET "/" [] "Hello World")
  (GET "/cheshire-cat" [] "Smile!")
  (route/not-found "Not Found"))
#+END_SRC

This is fun but not a lot useful. To get ready to communicate with the frontend,
we are going to want a more flexible JSON response. /Cheshire/ happens to be a
library for encoding and decoding JSON and it can be found on GitHub. Let's add
~[cheshire "5.4.0"]~ to our project file.

Now we are ready to change our handler to return a JSON response, using the
/cheshire/ library. There are two main functions: ~generate-string~, which
encodes data structures to JSON and ~parse-string~, which decodes from JSON.

#+BEGIN_SRC clojure :tangle ../src/living_clojure/chapter7.clj
(json/generate-string {:name "Cheshire Cat" :state :grinning})
;;-> "{\"name\":\"Cheshire Cat\",\"state\":\"grinning\"}"

(json/parse-string "{\"name\":\"Cheshire Cat\",\"state\":\"grinning\"}" true)
;;-> {:name "Cheshire Cat", :state "grinning"}
#+END_SRC

Now, let's turn our responses in JSON. /Ring/ deals with maps as both request
and response:

#+BEGIN_SRC clojure :tangle ../src/living_clojure/chapter7.clj
(defroutes app-routes
  (GET "/" [] "Hello World")
  (GET "/cheshire-cat" []
       {:status 200
        :headers {"Content-Type" "application/json; charset=utf-8"}
        :body (json/generate-string {:name "Cheshire Cat"
                                     :status :grinning})})
  (route/not-found "Not Found"))
#+END_SRC

Let's try it out using:

#+BEGIN_SRC sh
curl -i http://localhost:3000/cheshire-cat
#+END_SRC

We are going on now, creating an app where all the routes will be JSON
responses. In this case we can use a Ring middleware to automate this process
for us. First, we will update our project file includind the /ring-json/
dependency and removing the Cheshire one, because we won't use it directly
anymore and restart the server.

We are going to remove /Cheshire/ from the namespace and add the following
instead: ~[ring.middleware.json :as ring-json]~ and ~[ring.util.response :as
rr]~.

Now we can remove our handcrafted response, like this:

#+BEGIN_SRC clojure :tangle ../src/living_clojure/chapter7.clj
(defroutes app-routes
  (GET "/" [] "Hello World")
  (GET "/cheshire-cat" []
       (rr/response {:name "Cheshire Cat" :status :grinning}))
  (route/not-found "Not Found"))
#+END_SRC

Finally we add the middleware JSON wrapping of the body in our app definition:

#+BEGIN_SRC clojure clojure :tangle ../src/living_clojure/chapter7.clj
(def app
  (-> app-routes
      (wrap-defaults site-defaults)
      (ring-json/wrap-json-response)))
#+END_SRC

We have now a backend server that can handle both HTML and JSON responses.

** Using Clojure in your browser with ClojureScript

*ClojureScript* is a subset of the Clojure language that compiles down to
 Javascript thanks to Google's Closure compiler.

How do we get to start with it? It's just a library, so we add it to our
/project.clj/ file and have Leiningen get it for us: ~[org.clojure/clojurescript
"0.0-2371"]~. We'll also use a Leiningen plugin to make working with
ClojureScript a bit easier in the plugin section, ~lein-cljsbuild~, that
provides us the ~cljsbuild~ command and a nice REPL as well. With ~cljsbuild~ we
also need to specify some other configuration, so we add the following in the
/project.clj/ file:

#+BEGIN_SRC clojure :tangle ../src/living_clojure/chapter7.clj
{:cljsbuild {
             :build [{
                      :source-paths ["src-cljs"]
                      :compiler {
                                 :output-to "resources/public/main.js"
                                 :optimizations :whitespace
                                 :pretty-print true
                                 }
                      }]
             }}
#+END_SRC

Let's try it out getting a ClojureScript REPL up and running:

#+BEGIN_SRC sh
lein trampoline cljsbuild repl-rhino
#+END_SRC

It is good to remember that there are differences between Clojure and
ClojureScript. These major differences are:

- ClojureScript has Javascript interop rather than Java.
- Although there are atoms, there are no agents or refs.
- In ClojureScript only integer and floating-point numbers are
  supported.
- Of course, ClojureScript compiles to JavaScript.

Let's create a ~src-cljs~ directory in the root of our project and create a
ClojureScript file named ~core.cljs~ like this:

#+BEGIN_SRC clojure :tangle ../src/living_clojure/chapter7.clj
(ns cheshire-cat.core)

(defn ^:export init []
  (js/alert "hi"))
#+END_SRC

We use ~^:export~ to annotate that the ~init~ function will be exposed
to the global context. Google Closure compiler can be very aggressive
and it might even change the function names. Exporting the function
will prevent this.

Create then a cat.html file in the ~resources/public~ directory with the
following contents:

#+BEGIN_SRC html
<!DOCTYPE html>
<html>
  <head><title>Cheshire Cat</title></head>
  <body>
    <div id="cat-name">Name</div>
    <div id="status">Status</div>

    <script type="text/javascript" src="main.js"></script>
    <script type="text/javascript">cheshire_cat.core.init()</script>
  </body>
</html>
#+END_SRC

Now, start up the web server with ~lein ring server~. In another terminal run
the follow: ~lein cljsbuild auto~. This command will start a process that will
compile your core.cljs file and monitor the file changes, recompile when it
detects a change.

** Browser-connected REPL

To do this, there is another ~cljsbuild~ REPL to use when we want to attach our
browser to it:

#+BEGIN_SRC sh
lein trampoline cljsbuild repl-listen
#+END_SRC

This will start a ClojureScript REPL listening on port 9000. Now we need to
connect to it on our ClojureScript code:

#+BEGIN_SRC clojure
(ns cheshire-cat.core
  (:require [clojure.browser.repl :as repl]))

(defn ^:export init []
  (repl/connect "http://localhost:9000/repl"))
#+END_SRC

We can now manipulate the DOM, interact with our browser application, all from
the power of our ClojureScript REPL.

** Making HTTP calls with ClojureScript and cljs-http

The /cljs-http/ library is a great way to handle HTTP in ClojureScript. What
makes it even more interesting is that it uses the power of /core.async/ to
handle these calls asynchronously. Let's add it to our /project.clj/ file and
restart ~lein cljsbuild auto~.

Edit our /core.cljs/ file to add the following code:

#+BEGIN_SRC clojure
(ns cheshire-cat.core
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [clojure.browser.repl :as repl]
            [cljs-http.client :as http]
            [cljs.core.async :refer [<!]]))

(defn ^:export init []
  (repl/connect "http://localhost:9000/repl")
  (go
    (let [response (<! (http/get "/cheshire-cat"))]
      (js/alert (:body response)))))
#+END_SRC

** DOM control with ClojureScript and Enfocus

The /Enfocus/ library works with transformations on the DOM. For example given a
DOM element, we can transform it by setting the content. In particular, we want
to:

- Set the "cat-name" div to the data key "name" coming from our response.
- Set the "status" div to the data key "status" coming from our response.

Enfocus handles transformations in a elegant way using the ~at~ function. We
specify /where/ you want the transformation to take place using a CSS
selector. Once you specify where you want the transformation, you need to
specify what you actually want done at the node.

#+BEGIN_SRC clojure
(ns cheshire-cat.core
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [clojure.browser.repl :as repl]
            [cljs-http.client :as http]
            [cljs.core.async :refer [<!]]
            [enfocus.core :as ef]))

(defn ^:export init []
  (repl/connect "http://localhost:9000/repl")
  (go
    (let [response (<! (http/get "/cheshire-cat"))
          body (:body response)]
      (ef/at "#cat-name" (ef/content (:name body)))
      (ef/at "#status" (ef/content (:status body))))))
#+END_SRC

The /Enfocus/ ~at~ function can also handle multiple selectors with
transformations, so we can update "cat-name" and "status" together.

#+BEGIN_SRC clojure
(ef/at "#cat-name" (ef/content (:name body))
       "#status" (ef/content (:status body)))
#+END_SRC

What if we would like to have two transformations at one of the selectors? We
can use the /Enfocus/ ~do->~ function:

#+BEGIN_SRC clojure
(ef/at "#cat-name" (ef/content (:name body))
       "#status" (ef/do->
                  (ef/content (:status body))
                  (ef/set-style :font-size "500%")))
#+END_SRC

** Event handling with Enfocus

Enfocus provides event handling functions in a separate ~events~ namespace. Here
we can find a ~listen~ function:

#+BEGIN_SRC clojure
(listen :click (fn [event]))
#+END_SRC

Try this out adding a button to our HTML page and add a ~listen~ function to it.

#+BEGIN_SRC clojure
(ef/at "#button1" (ev/listen
                   :click
                   #(js/alert "bye!")))
#+END_SRC

Enfocus can also do also cool stuff like animations. So, when we are going to
click on the Goodbye button, we can fade everything out, making the grinning
text fade out slower than others. We can use the ~fade-out~ function in the
~effects~ namespace, that takes an ~integer~ argument of how long the animation
will take.

#+BEGIN_SRC clojure
(defn say-goodbye []
  (ef/at
   "#cat-name" (ee/fade-out 500)
   "#button1" (ee/fade-out 500)
   "#status" (ee/fade-out 5000)))
#+END_SRC

** Other useful web development libraries

*** Using Hiccup for templating

/Hiccup/ uses vectors with keywords to generate HTML structures, here is an
example of a form:

#+BEGIN_SRC clojure
(use 'hiccup.core)

(html
 [:h1 "Hi there"]
 [:div.blue "blue div"
  [:div.yellow "yellow div"
   [:div#bob "id bob"]]])
;;-> "<h1>Hi there</h1>
;;    <div class=\"blue\">blue div
;;      <div class=\"yellow\">yellow div
;;        <div id=\"bob\">id bob</div>
;;      </div>
;;    </div>"
#+END_SRC

*** Using Enlive for templating from static HTML files

/Enlive/ also does server-side generating of HTML, but it takes a different
approach, using static HTML files as templates and applying transformations on
them.

#+BEGIN_SRC clojure
(require '[net.cgrand.enlive-html :as enlive])

(def my-snippet (enlive/html-snippet
                 "<div id='foo'><p>Buttered Scones</p></div"))
#+END_SRC

Now that we have our snippet, we can do transformations on it using the ~at~
form.

#+BEGIN_SRC clojure
(enlive/at my-snippet [:dev#foo] (enlive/html-content "Marmalade"))
#+END_SRC

*** Using Liberator for content negotiation and other good things

/Liberator/ is a very useful library that fits nicely with /Ring/. One really
useful things it allows you to do is content negotiation. Liberator checks the
media type in the ~Accept~ request header and makes decisions based on it.

#+BEGIN_SRC clojure
(ANY "/cat" []
     (resource :available-media-types ["text/plain" "text/html" "application/json"]
               :handle-ok #(let [media-type (get-in % [:representation :media-type])]
                             (case media-type
                               "text/plain" "Cat"
                               "text/html" "<html><h2>Cat</h2></html"
                               "application/json" {:cat true}))
               :handle-not-acceptable "No cats here!"))
#+END_SRC

Liberator /resource/ is used to define the available media types for this
route. ~/cat~ route will accept ~text/plain~, ~text/html~ and
~application/json~.

*** Using Transit for a small, fast JSON alternative

/Transit/, released by Rich Hickey and Cognitect, is a set of libraries and a
format for sending data between applications. The main advantage over JSON is
that it has an integrated cache code system that makes it very small and
fast. To encode some data in Transit, you need to specify a byte array output
stream and a Transit writer:

#+BEGIN_SRC clojure
(require '[cognitect.transit :as transit])
(import [java.io.ByteArrayInputStream ByteArrayOutputStream])

(def out (ByteArrayOutputStream. 4096))
(def writer (transit/writer out :json))

(transit/write writer "cat")

(.toString out)
;;-> "[\"~#'\",\"cat\"]"
#+END_SRC

The process to read the data from a /transit/ input stream is similar:

#+BEGIN_SRC clojure
(def in (ByteArrayInputStream. (.toByteArray out)))
(def reader (transit/reader in :json))

(transit/read reader)
;;-> "cat"
#+END_SRC

Transit works in ClojureScript as well with transit-cljs.

*** Using Om for powerful client-side application

/Om/ is the ClojureScript interface for Facebook's /React/. It uses /components/
to create applications and one of its advantages the /reactive/ nature of
it. There is a bit of learning curve to get going on an Om application but
luckily there are some really good tutorials online, try this [[https://github.com/omcljs/om/wiki/Basic-Tutorial][Basic Om Tutorial]]
by David Nolen.

*** Dealing with databases

The usual thing to do in a Ring application is just create routes to read and
write from the database and create a function to do it. Libraries to choose
from:

- *java.jdbc*: a lower-level wrapper for JDBC.
- *Korma*: an abstraction for SQL queries.
- *Yesql*: allows you to keep your SQL queries decoupled.
